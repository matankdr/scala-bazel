#
# DO NOT EDIT THIS FILE!
#
# For repository specific customizations edit <repo-home>/.bazelrc
# For global workstation customizations create/edit ~/.bazelrc
#

#
# The following two declarations declare the 'wix' and 'localdev_new' config groups for all bazel commands. If you remove
# them make sure the wrapper script doesn't select these groups for commands they are not declared for, otherwise builds
# will break.
#
common:wix --experimental_generate_json_trace_profile
common:localdev --experimental_generate_json_trace_profile
common:sandbox-off --experimental_generate_json_trace_profile

# profile which gets appended as last on the bazel invocation command line
# can be used to override previously set flags
common:overrides --experimental_generate_json_trace_profile

# this flag disables docker rules transitions as it fails to find cpp toolchains.
# for this to work we might need to define a multiplatform cpp toolchains.
build --@io_bazel_rules_docker//transitions:enable=false

# this flag enables the generation of workspace info https://docs.bazel.build/versions/main/user-manual.html#workspace_status
build --workspace_status_command="tools/stamping/workspace_status.sh"

# [performance] Disable by default building deployables (jarball and containers) and Wix Docs locally since they aren't used and take a long time, also support a ci_only tag which can be used to exclude targets from a local build
build:localdev --build_tag_filters=-deployable,-wix_docs,-ci_only

# [disk-space] Repository cache
fetch:localdev --experimental_repository_cache_hardlinks
build:localdev --experimental_repository_cache_hardlinks

# [performance] Helps with timeouts when fetching multiple large docker images
fetch:localdev --experimental_scale_timeouts=20
build:localdev --experimental_scale_timeouts=20

# [performance] Turn test sand-boxing off safely
test:sandbox-off --strategy=TestRunner=standalone --local_test_jobs=1 --test_sharding_strategy=disabled


# Uniform remote-cache config profile
# This profile contains only static remote-cache related flags. Some flags are calculated based on local build
# environment and are added to the bazel command by the wrapper script.
# The wrapper script adds '--config=uniform_remote_cache' to all relevant commands running on MacOS
build:uniform_remote_cache --experimental_guard_against_concurrent_changes
build:uniform_remote_cache --remote_timeout=3
build:uniform_remote_cache --remote_retries=0
build:uniform_remote_cache --remote_upload_local_results=false
# upload/download to/from disk-cache regardless
build:uniform_remote_cache --incompatible_remote_results_ignore_disk
# The following flag modifies the configuration of all actions with the specified mnemonics by tagging them with the
# 'no-remote-cache' tag and by doing that dynamically configures all the matching actions for no-remote-caching.
build:uniform_remote_cache --modify_execution_info=JoinLayers=+no-remote-cache,ImageLayer=+no-remote-cache,GUNZIP=+no-remote-cache,GZIP=+no-remote-cache,Cpp.*=+no-remote-cache,CcStrip=+no-remote-cache
# The following two flags tell bazel to allocate up to 'HOST_CPUS' CPU bound threads and twice as much threads for IO
# bound and other jobs. This configuration has been tested and proved to lower build times to between 0 and 50%,
# depending on the action graph and amount of cached results.
build:uniform_remote_cache --local_cpu_resources=HOST_CPUS
build:uniform_remote_cache --jobs=HOST_CPUS*2
build:uniform_remote_cache --remote_local_fallback


# Remote-cache population jobs profile
# build as much as possible, even if parts of the repo are broken, we still want to build the rest
build:remote_cache_pop --keep_going
build:remote_cache_pop --verbose_failures
build:remote_cache_pop --announce_rc
# make sure remote uploads are enabled
build:remote_cache_pop --remote_upload_local_results=true
build:remote_cache_pop --remote_timeout=30
build:remote_cache_pop --remote_retries=3
# low memory profile
build:remote_cache_pop --worker_quit_after_build=true
build:remote_cache_pop --discard_analysis_cache
build:remote_cache_pop --nokeep_state_after_build
build:remote_cache_pop --notrack_incremental_state

#
# build
#

# Enforce stricter environment rules, which eliminates some non-hermetic behavior and therefore improves both remote and
# local cache hit rate and the correctness and repeatability of the build.
#
# From Bazel docs:
# If true, Bazel uses an environment with a static value for PATH and does not inherit LD_LIBRARY_PATH or TMPDIR.
# Use --action_env=ENV_VARIABLE if you want to inherit specific environment variables from the client, but note that
# doing so can prevent cross-user caching if a shared cache is used.
#
# IMPORTANT!
# When '--incompatible_strict_action_env' is present, bazel uses PATH=/bin:/usr/bin:/usr/local/bin on MacOS and Linux
# This can be changed using '--action_env=PATH=XXX', but doing that will result in CACHE MISSES.
# If different repos uses different values, they will not be able to share the remote cache.
build --incompatible_strict_action_env=true

build:bazel16uplocal --action_env=PLACE_HOLDER=SO_USING_CONFIG_GROUP_WILL_WORK_BW_CMPTBL
build --strategy=Scalac=worker
# build --strict_java_deps=error
build --strict_proto_deps=off

# Properly print out source code information when codegen fails due to proto file problems.
build --protocopt=--include_source_info

# automatically create an output filter for packages mentioned in the Bazel command line and their sub-packages
build --auto_output_filter=subpackages

# this flag makes Bazel keep the analysis cache when test flags such as 'test_arg' (and other 'test_xxx' flags) change
build --trim_test_configuration=true

#
# test
#

# the following flags serve tests but associated with the build command in order to avoid mutual analysis cache
# invalidation between test commands and build commands (see https://github.com/bazelbuild/bazel/issues/7450)
build --test_env=BUILD_TOOL=BAZEL
build --test_env=DISPLAY
build --test_env=LC_ALL=en_US.UTF-8

# IMPORTANT! 'test_arg' flags are passed to ALL test rules (cross technology) and are not designed to be used in mixed
# tech stack environments like ours.
test --test_tmpdir=/tmp
test --test_output=errors

# TEST - unique flags for running all UT
# Active those flags by running adding the flag: "--config=ut-only"
# Note: This is only required if you give bazel wildcard that might include IT
test:ut-only --test_tag_filters=UT,-IT

# TEST - unique flags for running IT
# Active those flags by running adding the flag: "--config=it"
test:it --test_tag_filters=IT
test:it --config=sandbox-off

# Useful debugging flags
common:debug --announce_rc
common:debug --explain=bazel_explain.log
common:debug --verbose_explanations=true
common:debug --verbose_failures
common:debug --toolchain_resolution_debug
common:debug --curses=no
common:debug --show_timestamps
test:debug --test_verbose_timeout_warnings
test:debug --verbose_test_summary

#
# DO NOT EDIT THIS FILE. You may edit <repo-home>/.bazelrc
#
